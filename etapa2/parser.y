%{
	#include <stdio.h>
	#include <stdlib.h>

	int getLineNumber(void);
	int yyerror(char *value);
	int yylex(void);
%}


%token KW_TO
%token KW_BYTE   
%token KW_SHORT     
%token KW_LONG     
%token KW_FLOAT     
%token KW_DOUBLE     
%token KW_WHEN       
%token KW_THEN       
%token KW_ELSE       
%token KW_WHILE      
%token KW_FOR        
%token KW_READ       
%token KW_RETURN     
%token KW_PRINT      

%token OPERATOR_LE   
%token OPERATOR_GE   
%token OPERATOR_EQ   
%token OPERATOR_NE   
%token OPERATOR_AND  
%token OPERATOR_OR   

%token TK_IDENTIFIER 
%token LIT_INTEGER   
%token LIT_REAL      
%token LIT_CHAR      
%token LIT_STRING    

%token TOKEN_ERROR   

%left '<' '>' OPERATOR_LE OPERATOR_GE OPERATOR_EQ OPERATOR_NE
%left '+' '-'
%left '*' '/'
%left OPERATOR_AND OPERATOR_OR

%%
	
	PROGRAMA: DECLARACAO PROGRAMA | /*vazio*/
	;
	DECLARACAO: FUNCOES | VARIAVEL_GLOBAL ';'
	;
	VARIAVEL_GLOBAL: TK_IDENTIFIER ':' TIPO VAR_GLOBAL_INIT_VEC
	;
	VAR_GLOBAL_INIT_VEC: VALOR | '[' LIT_INTEGER ']' VALOR_INICIALIZACAO_VETOR
	;
	VALOR: 	LIT_INTEGER  |
		LIT_REAL |
		LIT_CHAR 
	;
	VALOR_INICIALIZACAO_VETOR: VALOR VALOR_INICIALIZACAO_VETOR | /*vazio*/
	;
	TIPO: KW_BYTE  | 
	      KW_SHORT |    
	      KW_LONG  |  
 	      KW_FLOAT |   
	      KW_DOUBLE
	; 
	FUNCOES: CABECALHO CORPO
	;
	CABECALHO: TIPO TK_IDENTIFIER '(' LISTA_PARAMETROS ')'
	;
	LISTA_PARAMETROS: TIPO TK_IDENTIFIER MAIS_PARAMETROS | /*vazio*/
	;
	MAIS_PARAMETROS: ',' TIPO TK_IDENTIFIER MAIS_PARAMETROS | /*vazio*/
	;
	CORPO: COMANDO ';'
	;
	BLOCO_COMANDOS: '{'LISTA_COMANDOS'}'
	;
	LISTA_COMANDOS: COMANDO';' LISTA_COMANDOS | /*vazio*/
	;
	COMANDO: ATRIBUICAO|
		 CONTROLE_FLUXO|
		 READ|
		 PRINT|
		 RETURN|
		 BLOCO_COMANDOS|
		 /*vazio*/
	;
	ATRIBUICAO: TK_IDENTIFIER ASSINALAMENTO
	;
	ASSINALAMENTO: '='EXPRESSAO | '#'EXPRESSAO'='EXPRESSAO
	;
	READ: KW_READ TK_IDENTIFIER
	;
	PRINT: KW_PRINT LISTA_ELEMENTOS_PRINT
	;
	LISTA_ELEMENTOS_PRINT: ELEMENTO_PRINT LISTA_ELEMENTOS_PRINT | ELEMENTO_PRINT
	;
	ELEMENTO_PRINT: LIT_STRING | EXPRESSAO_ARITMETICA
	;
	RETURN: KW_RETURN EXPRESSAO
	;
	EXPRESSAO: EXPRESSAO_ARITMETICA | EXPRESSAO_LOGICA | CHAMADA_FUNCAO
	;
	EXPRESSAO_ARITMETICA: TK_IDENTIFIER|
			      TK_IDENTIFIER'['EXPRESSAO_ARITMETICA']'|
			      LIT_INTEGER |
			      LIT_REAL |
			      LIT_CHAR/*ASCII?????*/|
			      '('EXPRESSAO_ARITMETICA')'|
			      EXPRESSAO_ARITMETICA OPERADORES_ARITMETICOS EXPRESSAO_ARITMETICA
	;
	OPERADORES_ARITMETICOS: '+' 			|
		    		'-' 			|
		    		'*'			|
		    		'/'
	;
	EXPRESSAO_LOGICA: EXPRESSAO_ARITMETICA|
			  EXPRESSAO_LOGICA '>' EXPRESSAO_LOGICA |
			  EXPRESSAO_LOGICA '<' EXPRESSAO_LOGICA | 
			  EXPRESSAO_LOGICA OPERATOR_LE EXPRESSAO_LOGICA | 
			  EXPRESSAO_LOGICA OPERATOR_GE EXPRESSAO_LOGICA |
			  EXPRESSAO_LOGICA OPERATOR_EQ EXPRESSAO_LOGICA | 
			  EXPRESSAO_LOGICA OPERATOR_NE EXPRESSAO_LOGICA | 
			  EXPRESSAO_LOGICA OPERATOR_AND EXPRESSAO_LOGICA |
			  EXPRESSAO_LOGICA OPERATOR_OR EXPRESSAO_LOGICA | 
			  '!'EXPRESSAO_LOGICA
	;
	CHAMADA_FUNCAO: TK_IDENTIFIER '(' LISTA_FUNCAO_PARAMETROS ')'
	;
	LISTA_FUNCAO_PARAMETROS: EXPRESSAO_ARITMETICA',' LISTA_FUNCAO_PARAMETROS | EXPRESSAO_ARITMETICA |/*VAZIO*/
	;
	CONTROLE_FLUXO: WHEN_THEN | WHEN_THEN_ELSE | FOR | WHILE
	;
	WHEN_THEN: KW_WHEN '('EXPRESSAO')' KW_THEN COMANDO
	;
	WHEN_THEN_ELSE: KW_WHEN '(' EXPRESSAO ')' KW_THEN COMANDO KW_ELSE COMANDO
	;
	WHILE: KW_WHILE '(' EXPRESSAO ')' COMANDO
	;
	FOR: KW_FOR '(' TK_IDENTIFIER '=' EXPRESSAO KW_TO EXPRESSAO ')' COMANDO
	;
	

%%



int yyerror(char *value){
  fprintf(stderr, "Erro: %s ,na linha: %d\n",value,getLineNumber());
  exit(3);
}




