%{
	#include <stdio.h>
	#include <stdlib.h>

	int getLineNumber(void);
	int yyerror(char *value);
	int yylex(void);
%}



%token KW_BYTE   
%token KW_SHORT     
%token KW_LONG     
%token KW_FLOAT     
%token KW_DOUBLE     
%token KW_WHEN       
%token KW_THEN       
%token KW_ELSE       
%token KW_WHILE      
%token KW_FOR        
%token KW_READ       
%token KW_RETURN     
%token KW_PRINT      

%token OPERATOR_LE   
%token OPERATOR_GE   
%token OPERATOR_EQ   
%token OPERATOR_NE   
%token OPERATOR_AND  
%token OPERATOR_OR   

%token TK_IDENTIFIER 
%token LIT_INTEGER   
%token LIT_REAL      
%token LIT_CHAR      
%token LIT_STRING    

%token TOKEN_ERROR   


%%
	
	PROGRAMA: DECLARACAO PROGRAMA | /*vazio*/
	;
	DECLARACAO: FUNCOES | VARIAVEL_GLOBAL ';'
	;
	VARIAVEL_GLOBAL: TK_IDENTIFIER ':' TIPO VAR_GLOBAL_INIT_VEC
	;
	VAR_GLOBAL_INIT_VEC: VALOR | '[' LIT_INTEGER ']' VALOR_INICIALIZACAO_VETOR
	;
	VALOR: 	LIT_INTEGER  |
		LIT_REAL |
		LIT_CHAR 
	;
	VALOR_INICIALIZACAO_VETOR: VALOR VALOR_INICIALIZACAO_VETOR | /*vazio*/
	;
	TIPO: KW_BYTE  | 
	      KW_SHORT |    
	      KW_LONG  |  
 	      KW_FLOAT |   
	      KW_DOUBLE
	; 
	FUNCOES: CABECALHO CORPO
	;
	CABECALHO: TIPO TK_IDENTIFIER '(' LISTA_PARAMETROS ')'
	;
	LISTA_PARAMETROS: TIPO TK_IDENTIFIER LISTA_PARAMETROS | /*vazio*/
	;
	CORPO: LISTA_COMANDOS
	;
	LISTA_COMANDOS: COMANDO';' LISTA_COMANDOS | '{'LISTA_COMANDOS'}' | COMANDO | /*vazio*/
	;
	COMANDO: ATRIBUICAO|
		 CMD_READ|
		 CMD_PRINT|
		 CMD_WHILE|
		 CMD_FOR|
		 CMD_WHEN| 
		 CMD_ELSE|
		 /*vazio*/
	;
	ATRIBUICAO:IDENTIFICADOR '=' VALOR_ATRIBUICAO
	;
	IDENTIFICADOR: TK_IDENTIFIER | TK_IDENTIFIER'#'EXPRESSAO_ARITMETICA
	;
	VALOR_ATRIBUICAO: VALOR | EXPRESSAO_MATEMATICA | TK_IDENTIFIER'['EXPRESSAO_ARITMETICA']'
	;
	CMD_READ: TK_READ TK_IDENTIFIER
	;
	CMD_PRINT:TK_PRINT LISTA_IMPRESSAO
	;
	LISTA_IMPRESSAO: LIT_STRING LISTA_IMPRESSAO | EXPRESSAO_ARITMETICA LISTA_IMPRESSAO | /*VAZIO*/
	;
	CMD_WHILE: TK_WHILE'('EXPRESSAO_LOGICA')' LISTA_COMANDOS
	;
	CMD_FOR: TK_FOR'('TK_IDENTIFIER '=' EXPRESSAO_ARITMETICA TK_TO EXPRESSAO_ARITMETICA')' LISTA_COMANDOS
	;
	CMD_WHEN: TK_IF'('EXPRESSAO_LOGICA')' LISTA_COMANDOS
	;
	CMD_ELSE: '('EXPRESSAO_LOGICA')' LISTA_COMANDOS TK_ELSE LISTA_COMANDOS
	;
	EXPRESSAO_ARITMETICA: EXPRESSAO_ARITMETICA '+' EXPRESSAO_ARITMETICA |
			      EXPRESSAO_ARITMETICA '-' EXPRESSAO_ARITMETICA |
			      EXPRESSAO_ARITMETICA '*' EXPRESSAO_ARITMETICA |
			      EXPRESSAO_ARITMETICA '/' EXPRESSAO_ARITMETICA |
			      '('EXPRESSAO_ARITMETICA')' |
			      LIT_INTEGER |
			      LIT_REAL |
	  		      TK_IDENTIFIER
	;
	EXPRESSAO_LOGICA: EXPRESSAO_ARITIMETICA|
			  '('EXPRESSAO_LOGICA')' |
			  EXPRESSAO_LOGICA OPERATOR_LE EXPRESSAO_LOGICA | 
			  EXPRESSAO_LOGICA OPERATOR_GE EXPRESSAO_LOGICA |
			  EXPRESSAO_LOGICA OPERATOR_EQ EXPRESSAO_LOGICA | 
			  EXPRESSAO_LOGICA OPERATOR_NE EXPRESSAO_LOGICA | 
			  EXPRESSAO_LOGICA OPERATOR_AND EXPRESSAO_LOGICA |
			  EXPRESSAO_LOGICA OPERATOR_OR EXPRESSAO_LOGICA | 
			  EXPRESSAO_LOGICA '>' EXPRESSAO_LOGICA |
			  EXPRESSAO_LOGICA '<' EXPRESSAO_LOGICA | 
			  '!'EXPRESSAO_LOGICA
	;

%%



int yyerror(char *value){
  fprintf(stderr, "Erro: %s ,na linha: %d\n",value,getLineNumber());
  exit(3);
}




